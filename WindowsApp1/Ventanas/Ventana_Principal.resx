<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TextBox18.Text" xml:space="preserve">
    <value>-- 18. Historial de las acciones realizadas por todos los Usuarios en un período de tiempo
-- determinado. Ordenar cronológicamente. (Fecha, Acción, Datos Usuario, Datos PC)

select * from Historial
	where fecha_hora &gt; TO_DATE('10-28-1986','%m-%d-%Y') and fecha_hora &lt; TO_DATE('01-01-2040','%m-%d-%Y');
	order by fecha_hora;</value>
  </data>
  <metadata name="Control_impresion.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="TextBox1.Text" xml:space="preserve">
    <value>-- 1.Listado general de los Docentes de un Instituto Ordenado por Apellido y Nombre. (Apellido, Nombre)

select ( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido
	     from Personas
	     join Relacion_Docente_Trabaja_Instituto R
	     on  R.foranea_ci_docente = Personas.CI and foranea_id_instituto = 1
	     where Personas.baja = 'f'
	     order by Nombre_y_apellido;</value>
  </data>
  <data name="TextBox2.Text" xml:space="preserve">
    <value>-- Listado general de los Institutos y Escuelas indicando para cada uno cantidad de grupos, 
-- cantidad de estudiantes y cantidad de docentes de cada uno. Ordenado por nombre alfabéticamente
	    
select Institutos.nombre, (
			select count(*)  FROM ( 
				select distinct foranea_ci_alumno 
				from Relacion_Alumno_Asignatura_Grupos where foranea_id_instituto = Institutos.id_instituto) as cnt_alumnos
			) as Cantidad_Alumnos,
			(
			select count(*)  FROM ( 
				select distinct foranea_ci_docente 
				from Relacion_Docente_Trabaja_Instituto where foranea_id_instituto = Institutos.id_instituto) as cnt_docentes
			) as Cantidad_Docentes,
			(
			select count(*)  FROM ( 
				select distinct foranea_id_grupo 
				from Relacion_Grupos_Formado_Asignaturas where foranea_id_instituto = Institutos.id_instituto) as cnt_docentes
			) as Cantidad_Grupos
		from Institutos
        where Institutos.baja = 'f';</value>
  </data>
  <data name="TextBox3.Text" xml:space="preserve">
    <value>-- 3. Cantidad de Docentes por Materia . Ordenado por cantidad de Docentes de mayor a menor. (Materia, Cantidad)

	select Asignaturas.nombre_asignatura,count(*) as Cantidad_Docentes
		from ( select distinct foranea_ci_docente,foranea_id_asignatura from Relacion_Docente_Asignatura_Grupos ) as docente_asignatura
		join Asignaturas on foranea_id_asignatura = id_asignatura
		where Asignaturas.baja = 'f'
		group by Asignaturas.nombre_asignatura;
	</value>
  </data>
  <data name="TextBox4.Text" xml:space="preserve">
    <value>-- 4. Listado de Docentes para un grupo dado. Ordenado por Materia. ( Materia , Apellido, Nombre )
	
	
select Asignaturas.nombre_asignatura,
	   ( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido
	   from Relacion_Docente_Asignatura_Grupos
	   join Personas on Personas.CI = foranea_ci_docente
	   join Asignaturas on Asignaturas.id_asignatura = foranea_id_asignatura
       where foranea_id_grupo = 4 and Asignaturas.baja = 'f';</value>
  </data>
  <data name="TextBox5.Text" xml:space="preserve">
    <value>-- 5.Materias y Grupo que cursa un Estudiante en particular. (Materia, Grupo)

select Asignaturas.nombre_asignatura,Grupos.nombre_grupo
	   from Relacion_Alumno_Asignatura_Grupos
	   join Asignaturas on Asignaturas.id_asignatura = foranea_id_asignatura
	   join Grupos on Grupos.id_grupo = foranea_id_grupo
	   where foranea_ci_alumno = 31814743 and Asignaturas.baja = 'f';</value>
  </data>
  <data name="TextBox6.Text" xml:space="preserve">
    <value>-- 6 Listado de todas las Calificaciones de un Estudiante en particular para una Materia. ( Fecha, Tipo, Calificación )

select fecha, categoria, nota
	   from Calificaciones
	   where ci_alumno = 31814743 and Calificaciones.baja = 'f';</value>
  </data>
  <data name="TextBox7.Text" xml:space="preserve">
    <value>-- 7. Calificación y juicio final de un Estudiante para todas las Materias que cursa. (Materia, Calificación, Juicio)

select Asignaturas.nombre_asignatura as Nombre,nota_final_asignatura,
	( CASE
	    when nota_final_asignatura &lt; 4 then 'Examen_Febrero'
    	when nota_final_asignatura &gt;= 4 and  nota_final_asignatura &lt; 8 then 'Examen_Diciembre'
    	when nota_final_asignatura &gt;= 8 then 'Aprobado'
  		end
  	) as Juicio
	from relacion_alumno_asignatura_grupos
	join Asignaturas on Asignaturas.id_asignatura = foranea_id_asignatura
	where foranea_ci_alumno = 39912206 and Asignaturas.baja = 'f';</value>
  </data>
  <data name="TextBox8.Text" xml:space="preserve">
    <value>-- 8 Calificación final y juicio de todos los Estudiantes de un Grupo para una Materia en
-- particular. Ordenar por Apellido y  por Nombre.
-- (Apellido, Nombre, Calificación, Juicio)

select ( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido,	   
	Asignaturas.nombre_asignatura as Nombre,nota_final_asignatura,
	( CASE
	    when nota_final_asignatura &lt; 4 then 'Examen_Febrero'
    	when nota_final_asignatura &gt;= 4 and  nota_final_asignatura &lt; 8 then 'Examen_Diciembre'
    	when nota_final_asignatura &gt;= 8 then 'Aprobado'
  		end
  	) as Juicio
	from relacion_alumno_asignatura_grupos
	join Asignaturas on Asignaturas.id_asignatura = foranea_id_asignatura
	join Personas on Personas.CI = foranea_ci_alumno
	where foranea_id_asignatura = 57 and foranea_ci_alumno in ( select distinct foranea_ci_alumno
																from relacion_alumno_asignatura_grupos
																where foranea_id_grupo = 4);
					</value>
  </data>
  <data name="TextBox9.Text" xml:space="preserve">
    <value>-- 9. Calificación Final del Proyecto de pasaje de grado para cada Estudiante de un Grupo en
-- particular. ( Apellido, Nombre, Calificación)

select ( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido,
		(
        select  nvl(avg(nota),1)
          from calificaciones
            where  categoria 
             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
              and  CI_alumno = Personas.CI
		) as Nota_Final_Proyecto
		from Personas where Personas.baja = 'f' and Personas.CI in ( select distinct foranea_ci_alumno
																from relacion_alumno_asignatura_grupos
							</value>
  </data>
  <data name="TextBox10.Text" xml:space="preserve">
    <value>-- 10. Promedio, máximo, mínimo de calificaciones del Proyecto de pasaje de grado por Instituto
-- Ordenar por promedio de mayor a menor.. (Instituto, Promedio, Máxima, Mínima)

select I.nombre, 
	nvl(( 
	select avg(avg_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as avg_notas
	),1) as Nota_Promedio,
	nvl(( 
	select max(max_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as max_notas
	),1) as Nota_Maxima,
	nvl(( 
	select min(min_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as min_notas
	),1) as Nota_Minima
	from Institutos I
	order by Nota_Promedio DESC;</value>
  </data>
  <data name="TextBox11.Text" xml:space="preserve">
    <value>-- 11. Promedio, máximo, mínimo de Calificaciones del Proyecto de pasaje de grado para cada Turno de cada Instituto . 
-- Ordenar por promedio de mayor a menor.. (Instituto, Turno, Promedio, Máxima, Mínima)

select I.nombre, 
	nvl(( 
	select avg(avg_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Vespertino'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as avg_notas
	),1) as Nota_Promedio_Vespertino,
	nvl(( 
	select max(max_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Vespertino'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as max_notas
	),1) as Nota_Maxima_Vespertino,
	nvl(( 
	select min(min_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Vespertino'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as min_notas
	),1) as Nota_Minima_Vespertino,
	nvl(( 
	select avg(avg_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Matutino'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as avg_notas
	),1) as Nota_Promedio_Matutino,
	nvl(( 
	select max(max_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Matutino'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as max_notas
	),1) as Nota_Maxima_Matutino,
	nvl(( 
	select min(min_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Matutino'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as min_notas
	),1) as Nota_Minima_Matutino,
	nvl(( 
	select avg(avg_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Nocturno'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as avg_notas
	),1) as Nota_Promedio_Nocturno,
	nvl(( 
	select max(max_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Nocturno'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as max_notas
	),1) as Nota_Maxima_Nocturno,
	nvl(( 
	select min(min_notas.Nota_Final_Proyecto) from (
	select  distinct ( Personas.primer_nombre || ' ' || 
		     Personas.segundo_nombre || ' ' || 
		     Personas.primer_apellido || ' ' || 
		     Personas.segundo_apellido ) as Nombre_y_apellido,
		     (
	        select  nvl(avg(nota),1)
	          from calificaciones
	            where  categoria 
	             in ('Primera_entrega_proyecto','Segunda_entrega_proyecto','Tercera_entrega_proyecto','Defensa_individual','Defensa_grupal','Es_proyecto') 
	              and  CI_alumno = Personas.CI
			) as Nota_Final_Proyecto,
			Institutos.nombre
			from Personas 
			join Relacion_Alumno_Asignatura_Grupos on foranea_ci_alumno = Personas.CI
			join Institutos on Relacion_Alumno_Asignatura_Grupos.foranea_id_instituto = Institutos.id_instituto and Institutos.id_instituto = I.id_instituto
			join Grupos on Grupos.id_grupo = Relacion_Alumno_Asignatura_Grupos.foranea_id_grupo and Grupos.turno = 'Nocturno'
			where EXISTS ( select * from relacion_alumno_asignatura_grupos where foranea_ci_alumno = Personas.CI )
			and Personas.baja = 'f'
		) as min_notas
	),1) as Nota_Minima_Nocturno
	from Institutos I
	order by Nota_Promedio_Vespertino,Nota_Promedio_Matutino,Nota_Promedio_Nocturno DESC;</value>
  </data>
  <data name="TextBox12.Text" xml:space="preserve">
    <value>-- 12. Estudiante con el mejor promedio de Calificaciones de cada Instituto. Ordenar por promedio de calificaciones de 
-- mayor a menor. (Nombre Completto, Instituto, Turno, Grupo, Promedio )


select distinct tmp.nombre_y_apellido,Institutos.nombre,tmp.Promedio,Grupos.nombre_grupo,Grupos.turno
from 
Institutos
left join (
select  
		Institutos.id_instituto,
		Institutos.nombre,
		Personas.CI,
		( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido,
	     (
	     select avg(nota)
			from Calificaciones
			where Calificaciones.ci_alumno = Personas.CI
	     	) as Promedio
	    from Institutos
	    join Relacion_Alumno_Asiste_Instituto on Relacion_Alumno_Asiste_Instituto.foranea_id_instituto = Institutos.id_instituto 
	    	-- and Relacion_Alumno_Asiste_Instituto.foranea_ci_alumno = Personas.CI 
	    join Personas on Personas.CI = Relacion_Alumno_Asiste_Instituto.foranea_ci_alumno 
	    	and Personas.CI = (
				select ci_alumno from 
					( select first 1 ci_alumno,avg(nota) as Promedio
						from Calificaciones
						where Calificaciones.id_instituto = Institutos.id_instituto
						group by ci_alumno
						order by Promedio desc ) as avg_nota
					)
	  ) as tmp  on tmp.id_instituto = Institutos.id_instituto   
	 left join Personas on Personas.CI = tmp.CI
	 left join relacion_alumno_asignatura_grupos on relacion_alumno_asignatura_grupos.foranea_ci_alumno = Personas.CI
	 left join Grupos on Grupos.id_grupo = relacion_alumno_asignatura_grupos.foranea_id_grupo
	 where Institutos.baja = 'f'
	 order by tmp.Promedio desc;</value>
  </data>
  <data name="TextBox13.Text" xml:space="preserve">
    <value>-- 13. Estudiante con el mejor promedio de Calificaciones de cada Grupo de un Instituto en
-- particular. Ordenar por promedio de calificaciones de mayor a menor.
-- (Nombre Completto, Grupo, Turno, Promedio

select sumario_promedios.nombre_instituto,sumario_promedios.nombre_grupo,sumario_personas.turno,max_promedio
from 
(
select nombre_instituto,nombre_grupo,max(promedio) as max_promedio 
from ( 
select Personas.CI,
		( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido,
	     Institutos.nombre as nombre_instituto,
	     Grupos.nombre_grupo,
	     (select avg(nota) from Calificaciones where ci_alumno = Personas.CI) as Promedio
	     from Personas
	     join (select distinct foranea_ci_alumno,foranea_id_grupo,foranea_id_instituto from relacion_alumno_asignatura_grupos) as sumario_ins_grupos
	     on sumario_ins_grupos.foranea_ci_alumno = Personas.CI
	     join Institutos on Institutos.id_instituto = sumario_ins_grupos.foranea_id_instituto
	     join Grupos on Grupos.id_grupo = sumario_ins_grupos.foranea_id_grupo
	     order by Promedio DESC
	    ) as sumario_final
	    group by nombre_instituto,nombre_grupo
	    order by max_promedio   
) as sumario_promedios
join (
select Personas.CI,
		( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido,
	     Institutos.nombre as nombre_instituto,
	     Grupos.nombre_grupo,
	     Grupos.Turno,
	     (select avg(nota) from Calificaciones where ci_alumno = Personas.CI) as Promedio
	     from Personas
	     join (select distinct foranea_ci_alumno,foranea_id_grupo,foranea_id_instituto from relacion_alumno_asignatura_grupos) as sumario_ins_grupos
	     on sumario_ins_grupos.foranea_ci_alumno = Personas.CI
	     join Institutos on Institutos.id_instituto = sumario_ins_grupos.foranea_id_instituto
	     join Grupos on Grupos.id_grupo = sumario_ins_grupos.foranea_id_grupo
		) as sumario_personas 
on sumario_promedios.max_promedio = sumario_personas.Promedio and sumario_promedios.nombre_instituto = sumario_personas.nombre_instituto
and sumario_promedios.nombre_grupo = sumario_personas.nombre_grupo</value>
  </data>
  <data name="TextBox14.Text" xml:space="preserve">
    <value>-- 14. Estudiantes SIN Calificaciones para el Proyecto de pasaje de grado en un Instituto.
-- (Grupo, Datos Estudiante)

select Grupos.nombre_grupo,
	   Personas.CI,
	   ( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido	     
from Personas
join (select distinct foranea_id_grupo,foranea_ci_alumno from relacion_alumno_asignatura_grupos ) as tmp
on tmp.foranea_ci_alumno = Personas.CI
join Grupos on Grupos.id_grupo = tmp.foranea_id_grupo
where tipo = 'Alumno' and Personas.baja = 'f'
and not exists (
	select * from Calificaciones where ci_alumno = Personas.CI 
	and categoria in ( 'Primera_entrega_proyecto',
					   'Segunda_entrega_proyecto',
					   'Tercera_entrega_proyecto',
					   'Defensa_individual', 
					   'Defensa_grupal', 
					   'Es_proyecto'))	</value>
  </data>
  <data name="TextBox15.Text" xml:space="preserve">
    <value>-- 15. Docentes de un Instituto, indicando la cantidad de grupos/materias que tiene cada uno. (Datos Docente, Cantidad)

select ( Personas.primer_nombre || ' ' || 
	     Personas.segundo_nombre || ' ' || 
	     Personas.primer_apellido || ' ' || 
	     Personas.segundo_apellido ) as Nombre_y_apellido,
	     Personas.grado,
	     (
	     	select count(*)
	     		from ( select distinct foranea_id_asignatura 
	     					from Relacion_Docente_Asignatura_Grupos where
	     					foranea_ci_docente = Personas.CI ) as materias
	     ) as Cantidad_Asignaturas,
	     (
	     	select count(*)
	     		from ( select distinct foranea_id_grupo 
	     					from Relacion_Docente_Asignatura_Grupos where
	     					foranea_ci_docente = Personas.CI ) as materias
	     ) as Cantidad_Grupos
	     from Personas
	     where tipo = 'Docente' and baja = 'f';
	    </value>
  </data>
  <data name="TextBox16.Text" xml:space="preserve">
    <value>-- 16. Institutos en los que se dictan un Curso en particular, indicando la cantidad de grupos.
-- (Nombre, Datos Ubicación, CantidadGrupos)


select Institutos.nombre,
	Orientaciones.nombre_orientacion,
	(
	select count(*) 
		from Grupos 
		where foranea_id_instituto = Institutos.id_instituto and foranea_id_orientacion = 12
	) as Cantidad_Grupos
	from Institutos
	join Orientaciones on Orientaciones.id_orientacion = 12
	where exists (
		select * from Grupos where foranea_id_instituto = Institutos.id_instituto and foranea_id_orientacion = 12 )
		and Institutos.baja = 'f';
		</value>
  </data>
  <data name="TextBox17.Text" xml:space="preserve">
    <value>-- 17. Historial de las acciones realizadas por un Usuario en particular. Ordenar cronológicamente.
-- (Fecha, Acción, Datos PC)
		
select * from Historial
	where foranea_CI_Persona = 48914198
	order by fecha_hora;</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAD////////////////////////////////////////////////8/v//4/X//7bl/v+L1f7/a8n9/020
        9/88qPT/PKj0/0Wr9P9YtPb/esP4/6za+v/g8f3//P7/////////////////////////////////////
        ///////////////////////////////////////////////////9/v//2vL//5na/v9pyf3/VcL9/1HA
        /P9Fs/j/O6j0/zun9P87p/T/O6f0/zqm9P85pvT/Pqj0/1Sy9f+Ly/n/1ez9//z+////////////////
        ////////////////////////////////////////////////////////7vn//6Le/v9hxv3/UMD9/1LB
        /f9SwPz/RrP4/zyo9P87p/T/O6f0/zun9P87p/T/O6f0/zun9P87p/T/Oab0/zim9P9LrvX/ldD5/+v2
        /v///////////////////////////////////////////////////////////9vy//980P3/UsH9/1LB
        /f9Twf3/UsD8/0az+P88qPT/O6f0/zun9P87p/T/O6f0/zun9P87p/T/O6f0/zun9P87p/T/O6f0/zqm
        9P86p/T/abz3/9bs/f/////////////////////////////////////////////////T7///bMr9/1HA
        /f9Twf3/U8H9/1LA/P9Gs/j/PKj0/zun9P87p/T/O6f0/zun9P87p/T/O6f0/zun9P87p/T/O6f0/zun
        9P87p/T/O6f0/zun9P84pvT/WLT2/83o/P//////////////////////////////////////2/L//2zK
        /f9RwP3/U8H9/1PB/f9SwPz/RrP4/zuo9P87p/T/O6f0/zun9P87p/T/PKXz/zyl8/87pvT/O6f0/zun
        9P87p/T/O6f0/zun9P87p/T/O6f0/zun9P85pvT/WLT2/9Xs/f///////////////////////////+35
        //980P3/UcD9/1PB/f9Twf3/Ub/9/0Sy+P86p/T/Oab0/zmm9P85pvT/Oab0/zml9P9Efun/RXjo/zqh
        8/85pvT/Oab0/zmm9P85pvT/Oab0/zmm9P85pvT/Oqf0/zun9P84pvT/abz3/+v2/v//////////////
        ///9/v//ot3+/1LB/f9Twf3/U8H9/1bC/P9gvPb/WLLy/1ex8v9XsfL/V7Hy/1ex8v9XsfL/V7Dy/1Js
        4/9QXuH/V6vw/1ex8v9XsfL/V7Hy/1ex8v9XsfL/V7Hy/1ax8v9CqvT/O6f0/zun9P86pvT/lc/5//3+
        /////////////9ry//9hxv3/UsH9/1PB/f9Swf3/ZcX6/8nc6f/Y3+f/19/n/9ff5//X3+f/19/n/9jf
        5//P3Oj/b5zr/1+R7P/E1un/2ODn/9ff5//X3+f/19/n/9ff5//X3+f/0d3o/2K18f85pvT/O6f0/zqm
        9P9LrvX/1Oz9///////9/v//mdr+/1HA/f9Twf3/U8H9/1LB/f9ox/v/4e3z//Ty8v/z8vL/8/Ly//Py
        8v/z8vL/9fPy/7be9P89sPT/NKzz/53V9f/08vL/8/Ly//Py8v/z8vL/8/Ly//Py8v/s7/L/aLr0/zim
        9P87p/T/O6f0/zim9P+Ly/n//f7//+P1//9pyf3/UsH9/1PB/f9Twf3/UsD9/2nJ/f/r+P//////////
        ////////////////////////u+b+/zqv9P8xqvL/n9z9//////////////////////////////////f7
        //9qvPf/OKb0/zun9P87p/T/Oab0/1Sy9f/f8f3/tuX+/1XC/f9Twf3/U8H9/1PB/f9Swf3/aMj9/+P1
        ///3/P//9vz///b8///1+/7/9fv+//b7/v/o9f7/cqrz/1+e8f/a7f3/9vz+//X7/v/1+/7/9fv+//X7
        /v/1+/7/7fj+/2i79v84pvT/O6f0/zun9P87p/T/Pqj0/6za+v+L1f7/UsD9/1PB/f9Twf3/U8H9/1PB
        /f9Yw/3/dM39/3jP/f95z/3/c8n7/2i89/9muvb/Zrv3/2W7+f9NovT/SJzz/2S6+f9mu/j/Zrr2/2a6
        9v9muvb/Zrr2/2a69v9kufb/Raz1/zqn9P87p/T/O6f0/zun9P85pvT/esP4/2zK/f9Swf3/U8H9/1PB
        /f9Twf3/U8H9/1PB/f9RwP3/UcD9/0y7+/89q/X/OKb1/zim9f87nuT/QY7E/0d/pP89c5f/OYG0/zmY
        3P85pvT/OKf1/zim9P84pvT/OKb0/zim9P86p/T/O6f0/zun9P87p/T/O6f0/zqm9P9YtPb/W8T9/1PB
        /f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PB/f9TvPz/R6X3/zun9f89our/SYGo/1Vja/9cWVb/XVdQ/0dC
        PP8/PTn/PEdN/ztqi/87m9//O6j2/zun9P87p/T/O6f0/zun9P87p/T/O6f0/zun9P87p/T/Oqf0/0Wr
        9f9Uwf3/U8H9/1PB/f9Twf3/U8H9/1PB/f9Twf3/U8L9/1a1/P9Qk/j/PaLq/05zi/9fWlT/ZmFZ/2pn
        X/9qZ1//WFRO/1JNSP9NSEL/RD85/z1VZf87mt3/O6j1/zun9P87p/T/O6f0/zun9P87p/T/O6f0/zun
        9P87p/T/PKj0/1TB/f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PB/f9Twv3/VrX8/1CU+v9Girn/Yl9Z/2to
        YP9tamL/bWpi/2hlXv9WUk3/VFBL/1VRTP9UT0r/SkQ+/z1wlP87qPb/O6f0/zun9P87p/T/O6f0/zun
        9P87p/T/O6f0/zun9P89qPT/W8T9/1PB/f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PB/f9RsPv/T5L5/0+E
        qP9saF//bGlh/2ZjW/9ZVU7/SEQ//0E9OP9IRD//UExH/1RQS/9UTkj/RmqC/zum8/87p/T/O6f0/zun
        9P87p/T/O6f0/zun9P87p/T/PKj0/062+P9syv3/UsH9/1PB/f9Twf3/U8H9/1PB/f9Twf3/S7n6/0Si
        9/9Okvr/UIap/2FcVP9QTUb/Qj45/zs3Mv86NjH/Ozcy/zs3Mv8+OjX/REA7/01HQf9Jbob/O6j1/zuo
        9v87p/T/O6f0/zun9P87p/T/O6f0/zyo9P9GtPj/bMr9/4vV/v9SwP3/U8H9/1PB/f9Twf3/U8L+/0u6
        /f89qvX/QJTf/0xwzf9DVHb/Pjo3/zo2L/87NzH/Ozcy/zs3Mv87NzL/Ozcy/zs3Mv87NzL/PDcy/z5H
        TP88c5r/O5XV/zum8v87qff/O6f1/zun9P88qPT/R7T4/1HA/f+L1f7/tuX+/1XC/f9Twf3/U8H9/1PB
        /f9Lsu//Po7F/ztnhf88R07/PjtM/0I+bP9DQHb/QD1e/z05P/87NzH/Ozcw/zs3Mv87NzL/Ozcy/zs3
        Mv87NzL/OzYx/zs2Mf87Q0b/O2F6/zuGuv87nuX/PKfz/0e0+P9SwP3/VcL9/7bl/v/j9f//acn9/1LB
        /f9Twv7/Ubny/0N3lf88QUP/OzMs/zs1L/87NzD/Ozcx/z05QP9APV//Q0B2/0I/bf8+Okz/Ozc0/zs3
        Mv87NzL/Ozcy/zs3Mv87NzL/Ozcy/zs2MP87Myz/PD07/0Bpgv9Jq+b/UsH+/1LB/f9pyf3/4/X///3+
        //+Z2v7/UcD9/1PB/f9Twfz/Ubft/0yYwP9Ea37/PkZI/zs2Mf87NS//Ozcx/zs3MP88ODb/PjtP/0A9
        Xv88ODf/Ozcy/zs3Mv87NzL/Ozcy/zs2MP87NjD/PUFB/0Njcv9LkbX/UbPo/1PA+/9Twf3/UcD9/5na
        /v/9/v///////9ry//9hxv3/UsH9/1PB/f9Twv7/U8P//1PA+/9Pq93/SIKg/0FWX/88Ozn/OzUv/zs2
        MP87NzD/Ozcw/zs3Mv87NzL/OzYx/zs1L/88OTX/P09W/0d6lP9OpdT/Ur74/1PD//9Twv7/U8H9/1LB
        /f9hxv3/2vL//////////////f7//6Ld/v9Swf3/U8H9/1PB/f9Twf3/U8H9/1PC//9Tw///Urjw/0yZ
        wf9Ea37/PkZI/zs2Mf87NS//OzUw/zs2MP89QUH/Q2Ny/0uRtv9RtOr/U8L+/1PD//9Twf3/U8H9/1PB
        /f9Twf3/UsH9/6Ld/v/9/v//////////////////7fn//3zQ/f9RwP3/U8H9/1PB/f9Twf3/U8H9/1PB
        /f9Twv7/U8P//1PA+/9Pq93/SIKg/0FWX/9AUVf/R3qU/06l1P9Svvj/U8P//1PC/v9Twf3/U8H9/1PB
        /f9Twf3/U8H9/1HA/f980P3/7fn/////////////////////////////2/L//2zK/f9RwP3/U8H9/1PB
        /f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PC//9Tw///Urjw/1G27P9Twv7/U8P//1PB/f9Twf3/U8H9/1PB
        /f9Twf3/U8H9/1PB/f9RwP3/bMr9/9vy////////////////////////////////////////0+///2zK
        /f9RwP3/U8H9/1PB/f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PB/f9Twv7/U8L+/1PB/f9Twf3/U8H9/1PB
        /f9Twf3/U8H9/1PB/f9Twf3/UcD9/2zK/f/T7///////////////////////////////////////////
        ////////2/L//3zQ/f9Swf3/UsH9/1PB/f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PB
        /f9Twf3/U8H9/1PB/f9Twf3/UsH9/1LB/f980P3/2/L/////////////////////////////////////
        ////////////////////////7vn//6Le/v9hxv3/UMD9/1LB/f9Twf3/U8H9/1PB/f9Twf3/U8H9/1PB
        /f9Twf3/U8H9/1PB/f9Twf3/UsH9/1DA/f9hxv3/ot7+/+75////////////////////////////////
        /////////////////////////////////////////f7//9ry//+Z2v7/acn9/1XC/f9RwP3/UsH9/1PB
        /f9Twf3/U8H9/1PB/f9Swf3/UcD9/1XC/f9pyf3/mdr+/9ry///9/v//////////////////////////
        //////////////////////////////////////////////////////////////z+///j9f//tuX+/4vV
        /v9syv3/W8T9/1TB/f9Uwf3/W8T9/2zK/f+L1f7/tuX+/+P1///8/v//////////////////////////
        ////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>